name: Deploy Demo App

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-and-push-image:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: ‚úÖ Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'corretto'
          cache: gradle

      - name: ü§ù Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: üîíConfigure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üß± Build Image and Push to ECR and Docker
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ECR_REPO: ${{ secrets.AWS_ECR_DEV_REPOSITORY_NAME }}
          DOCKER_ACCOUNT_ID: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_REPO : ${{ secrets.DOCKER_REPO }}
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
          docker build -t $AWS_ECR_REPO .
          docker tag $AWS_ECR_REPO:latest public.ecr.aws/$AWS_ACCOUNT_ID/$AWS_ECR_REPO:latest
          docker push public.ecr.aws/$AWS_ACCOUNT_ID/$AWS_ECR_REPO:latest
          
          docker login -u $DOCKER_ACCOUNT_ID -p $DOCKER_PASSWORD
          docker build -t $DOCKER_REPO:latest .
          docker tag $DOCKER_REPO:latest $DOCKER_ACCOUNT_ID/$DOCKER_REPO:latest
          docker push $DOCKER_ACCOUNT_ID/$DOCKER_REPO:latest


#  create-deploy:
#    needs: build-and-push-image
#    runs-on: ubuntu-22.04
#    steps:
#      - name: ‚öôÔ∏è Create Application Property Files
#        env:
#          APPLICATION_PROPERTY: ${{ secrets.APPLICATION_PROPERTY }}
#          JWT_PUBLIC_KEY_PEM: ${{ secrets.JWT_PROD_RSA_PUBLIC_KEY }}
#          JWT_PRIVATE_KEY_PEM: ${{ secrets.JWT_PROD_RSA_PRIVATE_KEY }}
#          APPLE_CREDENTIAL_KEY: ${{ secrets.APPLE_PROD_AUTH_P8_NAME }}
#          APPLE_CREDENTIAL_CONTENT: ${{ secrets.APPLE_PROD_AUTH_P8_CONTENT }}
#        run: |
#          mkdir -p property
#
#          touch ./property/application.properties
#          echo "$APPLICATION_PROPERTY" >> ./property/application.properties
#
#          touch ./property/jwt_public_key.pem
#          echo "$JWT_PUBLIC_KEY_PEM" >> ./property/jwt_public_key.pem
#
#          touch ./property/$APPLE_CREDENTIAL_KEY
#          echo "$APPLE_CREDENTIAL_CONTENT" >> ./property/$APPLE_CREDENTIAL_KEY
#
#      - name: üìÑ Create Script Files
#        env:
#          DEPLOY_SCRIPT: ${{ secrets.DEPLOY_SCRIPT }}
#          SWITCH_SCRIPT: ${{ secrets.SWITCH_SCRIPT }}
#          VALIDATE_SCRIPT: ${{ secrets.VALIDATE_SCRIPT }}
#        run: |
#          mkdir -p script
#
#          touch ./script/deploy.sh
#          echo "$DEPLOY_SCRIPT" >> ./script/deploy.sh
#
#          touch ./script/switch.sh
#          echo "$SWITCH_SCRIPT" >> ./script/switch.sh
#
#          touch ./script/valid.sh
#          echo "$VALIDATE_SCRIPT" >> ./script/valid.sh
#        shell: bash
#
#      - name: üìÅ Make files to zip
#        run: zip -r ./$GITHUB_SHA.zip ./script ./property
#        shell: bash
#
#      - name: üîë Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: $AWS_ACCESS_KEY
#          aws-secret-access-key: $AWS_SECRET_KEY
#          aws-region: $AWS_REGION
#
#      - name: üöÄ Upload Property Zip to S3 and Create Code Deploy
#        env:
#          AWS_DEPLOY_APPLICATION_NAME: ${{ secrets.AWS_DEPLOY_APPLICATION_NAME }}
#          AWS_DEPLOY_GROUP_NAME: ${{ secrets.AWS_PROD_DEPLOY_GROUP_NAME }}
#          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
#          AWS_BUCKET_DEPLOY_PATH: ${{ secrets.AWS_BUCKET_PROD_DEPLOY_PATH }}
#        run: |
#          aws s3 cp --region $AWS_REGION ./$GITHUB_SHA.zip s3://$AWS_BUCKET_NAME$AWS_BUCKET_DEPLOY_PATH/$GITHUB_SHA.zip
#          aws deploy create-deployment --application-name $AWS_DEPLOY_APPLICATION_NAME
#          --deployment-config-name CodeDeployDefault.AllAtOnce
#          --deployment-group-name $AWS_DEPLOY_GROUP_NAME
#          --s3-location bucket=$AWS_BUCKET_NAME,bundleType=zip,key=$AWS_BUCKET_DEPLOY_PATH/$GITHUB_SHA.zip